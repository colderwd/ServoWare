package zju.cse.servoware;

public class CRC16 {
	public static final int CRCCCITT = 0x1021;
	public static final int CCITT_REV = 0x8408;
	public static final int CRC16 = 0x8005;
	public static final int CRC16_REV = 0xA001;
	public static final long CRC32_POLYNOMIAL = 0xEDB88320L;
	/* 　以上为CRC除数的定义　 */

	private int cnCRC_16 = CRCCCITT; // CRC-16=X16+X15+X2+X0
	public static final int[] Table_CRC = {
			0x0000,0x016f,0x02de,0x03b1,0x05bc,0x04d3,0x0762,0x060d,
			0x0b78,0xa117,0x09a6,0x08c9,0x0ec4,0x0fab,0x0c1a,0x0d75,
			0x16f0,0x179f,0x142e,0x1441,0x134c,0x1223,0x1192,0x10fd,
			0x1d88,0x1ce7,0x1f56,0x1e39,0x1834,0x195b,0x1aea,0x1b85,
			0x2de0,0x2c8f,0x2f3e,0x2e51,0x285c,0x2933,0x2a82,0x2bed,
			0x2698,0x27f7,0x2446,0x2429,0x2324,0x224b,0x21fa,0x2095,
			0x3b10,0x317f,0x39ce,0x38a1,0x3eac,0x3fc3,0x3c72,0x3d1d,
			0x3068,0x3107,0x32b6,0x33d9,0x35d4,0x34bb,0x370a,0x3665,
			0x5bc0,0x51af,0x591e,0x5871,0x5e7c,0x5f13,0x5ca2,0x5dcd,
			0x50b8,0x51d7,0x5266,0x5309,0x5504,0x546b,0x57da,0x56b5,
			0x4b30,0x415f,0x49ee,0x4881,0x4e8c,0x4fe3,0x4c52,0x4d3d,
			0x4648,0x4727,0x4496,0x44f9,0x43f4,0x429b,0x412a,0x4045,
			0x7620,0x774f,0x74fe,0x7491,0x739c,0x72f3,0x7142,0x702d,
			0x7d58,0x7c37,0x7f86,0x7ee9,0x78e4,0x798b,0x7a3a,0x7b55,
			0x60d0,0x61bf,0x620e,0x6361,0x656c,0x6403,0x67b2,0x66dd,
			0x6ba8,0x61c7,0x6976,0x6819,0x6e14,0x6f7b,0x6cca,0x6da5,
			0xb780,0xb6ef,0xb55e,0xb431,0xb23c,0xb353,0xb0e2,0xb18d,
			0xbcf8,0xbd97,0xbe26,0xbf49,0xb944,0xb82b,0xbb9a,0xbaf5,
			0xa170,0xa01f,0xa3ae,0xa2c1,0xa4cc,0xa5a3,0xa612,0xa77d,
			0xaa08,0xab67,0xa8d6,0xa9b9,0xafb4,0xaedb,0xad6a,0xac05,
			0x9a60,0x9b0f,0x98be,0x99d1,0x9fdc,0x9eb3,0x9d02,0x9c6d,
			0x9118,0x9077,0x93c6,0x92a9,0x94a4,0x95cb,0x967a,0x9715,
			0x8c90,0x8dff,0x8e4e,0x8f21,0x892c,0x8843,0x8bf2,0x8a9d,
			0x87e8,0x8687,0x8536,0x8459,0x8254,0x833b,0x808a,0x81e5,
			0xec40,0xed2f,0xee9e,0xeff1,0xe9fc,0xe893,0xeb22,0xea4d,
			0xe738,0xe657,0xe5e6,0xe489,0xe284,0xe3eb,0xe05a,0xe135,
			0xfab0,0xfbdf,0xf86e,0xf901,0xff0c,0xfe63,0xfdd2,0xfcbd,
			0xf1c8,0xf0a7,0xf316,0xf279,0xf474,0xf51b,0xf6aa,0xf7c5,
			0xc1a0,0xc0cf,0xc37e,0xc211,0xc41c,0xc573,0xc6c2,0xc7ad,
			0xcad8,0xcbb7,0xc806,0xc969,0xcf64,0xce0b,0xcdba,0xccd5,
			0xd750,0xd63f,0xd58e,0xd4e1,0xd2ec,0xd383,0xd032,0xd15d,
			0xdc28,0xdd47,0xdef6,0xdf99,0xd994,0xd8fb,0xdb4a,0xda25
	};  // CRC 表

	// 计算 16 位 CRC 值，CRC-16 或 CRC-CCITT
	public static short CRC_16(byte[] aData, int offset, int count) {
		int i;
		int nAccum = 0;
		int index = 0;
		for (i = offset; i < count; i++) {
			index = (nAccum >> 8) ^ (aData[i] & 0x00ff);
			nAccum = ((nAccum << 8) ^ Table_CRC[index]);
			nAccum = nAccum & 0x0000ffff;

		}
		return (short) nAccum;
	}

	public static boolean isCRCChecked(String[] recvd){
		byte[] data = new byte[recvd.length];
		for(int i = 0; i<recvd.length; i++){
			data[i] = Integer.valueOf(recvd[i],16).byteValue();
		}
		return  String.format("%04x",CRC_16(data,0,recvd.length-2)).equals(recvd[recvd.length-1]+recvd[recvd.length-2]);
	}

	public static boolean isCRCChecked(byte[] recvd, int len){
		short crcCode = CRC_16(recvd,0,len-2);
		byte low = (byte)(crcCode & 0x00ff);
		byte high = (byte)((crcCode & 0xff00)>>8);
		return (recvd[len-1]==high && recvd[len-2]==low);
	}

}
